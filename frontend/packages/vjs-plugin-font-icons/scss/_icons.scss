@use "sass:meta";
@use "sass:string";

// https://github.com/sass/sass/issues/659#issuecomment-64819075
@function char($character-code) {
  @if meta.function-exists("selector-append") {
    @return string.unquote("\"\\#{$character-code}\"");
  }

  @return str-slice("\x", 1, 1) + $character-code;
}

$icon-font-family: MediaCmsVideoJsIcons;

@font-face {
  font-family: $icon-font-family;
  src: url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAVgAAsAAAAACPAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAADsAAABUIIslek9TLzIAAAFEAAAAQQAAAGBHI1QJY21hcAAAAYgAAABtAAABxPJEI45nbHlmAAAB+AAAASkAAAHcnzcTD2hlYWQAAAMkAAAALgAAADZa1KUnaGhlYQAAA1QAAAAYAAAAJAdUA/FobXR4AAADbAAAABAAAAAgG1gAAGxvY2EAAAN8AAAAEgAAABIB2AFkbWF4cAAAA5AAAAAfAAAAIAEVAExuYW1lAAADsAAAAUkAAAKmImr7xXBvc3QAAAT8AAAAYgAAAIcmP37ieJxjYGRgYOBiMGCwY2BycfMJYeDLSSzJY5BiYGGAAJA8MpsxJzM9kYEDxgPKsYBpDiBmg4gCACY7BUgAeJxjYGHOZpzAwMrAwFTFtIeBgaEHQjM+YDBkZAKKMrAyM2AFAWmuKQwHPjJ+ZGd+AeRGsTiBhRlRFDEBAEnDCr8AAAB4nO2RwQ3DQAgEBx++k6yUEqWgvPJw/xIV2AukDCMNOlbLPRZgB4Z4Cwf7YWR9pVrpg6N051MeTz3Wdalbds3aZDH1m8u/pcMmT72qn/9pZWJNvbdGuRGjyXuEN5lq7E3eKGZD7q0GuwGnTxXVAAAAeJx1ULFOwzAQ9Z3VdqASSklaLwyJUa2KJW5IGSyCYEDd2w9g7wcwZYEfYGcpCyNLl25Z4DP6AVk6dYrUCNtNChVgWe98p6d3z48g0YfO8JMckxNCwA+ap+B2I384uoKLPvVjn7LtMpAywLHB7RLH+BHygocWykVhJMAAvuCaNHTT6rV6l/CqskwVuLZlz3mqOEJTBD6qolAZLmypOXRGSc0BAQ/vKoeNgrtdJZVnyr49e87Oc+wYz84fnimTvLznUnKYc1m2YU5opXOrdQS5/q0EPOZeFEee2zyHoK8DGSkYdr3GP/ODreVzMpkkzEk7jHVSh8FZMp0m9mmH9CbkZdukCBsd48pL3YGhvhkYHHT7XJj+85HNRdiIdYKUqTyvL65+NF9VnGapAAAAeJxjYGRgYADimwdK2eL5bb4ycDO/AIow1KhuaECmmbOZnYAUBwMTiAcAIjEJCwAAeJxjYGRgYH7BwAAnsxkYGVABBwA7+wJPeJxjYGBgYH6BGwMAYJgGbgAAAAAAJAA2AEgAWgB+ANQA7gAAeJxjYGRgYOBgcGBgZgABJiDmAkIGhv9gPgMAD6cBYgB4nI2STWrCQBiG39SfUoVSaOmmm1mJUEjUpXQnKAp24SL7mEw0kmTCZBQ8RO/Qc/QApSfocUpfp7MpuHACk+d7vp+EZADc4RMeTsvDg91P6wrXjP64QXpy3CQHjlvoYuK4Tf/quINnrB13cY83TvCaNzR9vDu+wi2+HDfovx03yT+OW3j0eo7b6HsvjjsIvcRxFz3vYymTLJoUdZglUi3qeazKeiU3+zzS51LnXCh1nalSDP3BufRMllJHRiZifRT1YTMyJhWpVoWYqtLIPFei0monY+NvjanGQZA678eqwBISCTJE/F4FaoTkhE5hwWiOmFSSVnQb7JGzUl/cdWldSKd5z2wsMISPwcXdM7rSTohgbI/gXz5yr3HgW49oDVLGKWsUZwlMbe+pOuelaCqb29HE9D62tqvCmKcqYOf/et8+vfgFwPGC2wAAAHicbcpbDkAwEEbhGXfispIuqvRHE2mFcVk+IfHkvH3JoYDeCvov44BDjjjmhFPOOKdSRmjBonaLo3J6t8NN5XBK86lF7xdExjuUBr3eJnn+upv8CqM6PYv1Ln5IdAFA+B6xAAA=) format('woff');
  font-weight: normal;
  font-style: normal;
}

// http://sass-lang.com/documentation/file.SASS_REFERENCE.html#maps
$icons: (
          close: 'f101',
          closed-caption: 'f102',
          default-view: 'f103',
          done: 'f104',
          navigate-before: 'f105',
          navigate-next: 'f106',
          theater-view: 'f107',
);

// NOTE: This is as complex as we want to get with SCSS functionality.
//
// Now that we have a map of icons above, we can iterate over that map and create an icon class
// for each icon in that list. The iterator below produces CSS classes like this:
//
// .vjs-icon-play {
//   font-family: VideoJS;
//   font-weight: normal;
//   font-style: normal;
// }
// .vjs-icon-play:before { content: "\25b6"; }
//
// We can then use @extend in the codebase when we need to add an icon to a class. @extend builds up
// the selectors for you so you can avoid duplication. This is generally a bad idea, but since each
// icon should only be extended one or two other places, we'll roll with it.
@each $name, $content in $icons {
  .vjs-icon-#{$name} {
    font-family: $icon-font-family;
    font-weight: normal;
    font-style: normal;

    &:before {
      content: char($content);
    }
  }
}
